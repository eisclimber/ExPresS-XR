<ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="False">
    <ui:VisualElement name="step-5-exporting-data-bindings" style="flex-grow: 1;">
        <ui:Label text="Exporting Data Bindings..." display-tooltip-when-elided="true" name="step-header" style="flex-direction: row; flex-grow: 0; height: auto; font-size: 20px; -unity-text-align: upper-center; flex-shrink: 1; -unity-font-style: bold; padding-left: 0; padding-right: 0; padding-bottom: 4px;" />
        <ui:Label text="Adding new columns to be exported is handled via Drag&amp;Drop similar to Unity&apos;s Event System:&#10;When **+**-Button in the editor for the `dataBindings`-array is pressed, a new entry is generated where a column name and a GameObject can be specified.  &#10;Once a GameObject is set the Dropdown-Menu `Values To Save` can be used to select a value from a Component of the object, similar to how UnityEvents work. The selected value will be evaluated every every time a new CSV-line is exported.  &#10;For exportable values are either public properties, members or functions. The latter may not have any (required) arguments but can be used on functions with default values. One notable exception is, if the first parameter is of type `char`. In these cases the DataGatherer will call the function passing the `columnSeparator`. This is especially useful when returning multiple columns as described below.&#10;&#10;Please note that only primitive, positional values (Position, Rotation) and Strings can be exported here.  &#10;Should other values be exported a function converting a value into a string can be created for that purpose.  &#10;This also applies for value from static fields that do not have a GameObject associated with them (e.g. `Application.version`).&#10;" display-tooltip-when-elided="true" name="step-description" style="flex-grow: 1; white-space: normal;" />
        <ui:VisualElement name="example-code">
            <ui:Label text="Example  Code:" display-tooltip-when-elided="true" name="example-label" style="flex-grow: 1; flex-direction: column-reverse;" />
            <ui:Label text="class ExportWrapperComponent&#10;{&#10;&#x9;class MyObject myObject;&#10;&#x9;public string getApplicationVersion() =&gt; Application.version;&#10;&#x9;// Assuming the class &quot;MyObject&quot; exists and has a function &quot;getExportValue()&quot;&#10;&#x9;public string getMyObjectExportValue() =&gt; myObject.getExportValue();&#10;}" display-tooltip-when-elided="true" name="code-field" style="margin-left: 8px; margin-right: 8px; margin-top: 8px; margin-bottom: 8px; background-color: rgb(41, 41, 41); border-left-color: rgb(47, 47, 47); border-right-color: rgb(47, 47, 47); border-top-color: rgb(47, 47, 47); border-bottom-color: rgb(47, 47, 47); border-left-width: 2px; border-right-width: 2px; border-top-width: 2px; border-bottom-width: 2px; border-top-left-radius: 2px; border-bottom-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; padding-left: 8px; padding-right: 4px; padding-top: 4px; padding-bottom: 4px;" />
        </ui:VisualElement>
    </ui:VisualElement>
    <ui:VisualElement name="controls-view" style="flex-direction: row; justify-content: flex-end;">
        <ui:Button text="Back" display-tooltip-when-elided="true" name="back-button" />
        <ui:Button text="Next" display-tooltip-when-elided="true" name="next-button" />
    </ui:VisualElement>
</ui:UXML>
